"""
Unit tests for ``data_processing`` module.

This file includes starter tests for the functions defined in
``python_examples/data_processing.py``.  Use these tests as a baseline to
validate the implementations generated by AI.  You are encouraged to add more
tests to cover edge cases and error handling.
"""

import sys
import os
import pytest
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from python_examples.data_processing import (
    calculate_student_statistics,
    normalise_scores,
    # group_by_grade
)


def test_calculate_student_statistics():
    """Test the calculate_student_statistics function for correct average, median, and max calculation."""
    # Normal list
    scores = [90, 80, 70]
    assert calculate_student_statistics(scores) == (80.0, 80.0, 90.0)
    # Two values
    scores = [100.0, 75.5]
    assert calculate_student_statistics(scores) == (87.75, 87.75, 100.0)
    # Empty list
    import pytest
    with pytest.raises(ValueError):
        calculate_student_statistics([])


def test_calculate_student_statistics_even_count() -> None:
    scores = [100.0, 75.5]
    avg, med, max_score = calculate_student_statistics(scores)
    assert avg == pytest.approx(87.75)
    assert med == pytest.approx(87.75)
    assert max_score == 100.0


def test_normalise_scores():
    """Test the normalise_scores function for correct scaling and edge cases."""
    # Normalisation
    assert normalise_scores([25, 50], target=100) == [50.0, 100.0]
    # Empty list
    assert normalise_scores([], target=100) == []
    # Max zero
    assert normalise_scores([0, 0], target=100) == [0.0, 0.0]


def test_normalise_scores_empty() -> None:
    assert normalise_scores([], target=100) == []


# def test_group_by_grade():
#     """Test the group_by_grade function for correct grade grouping."""
#     # Grouping
#     scores = [95, 82, 67, 50]
#     result = group_by_grade(scores)
#     assert result['A'] == [95]
#     assert result['B'] == [82]
#     assert result['D'] == [67]
#     assert result['F'] == [50]